

<dependency>
<groupId>org.apache.derby</groupId>
<artifactId>derby</artifactId>
<version>10.14.1.0</version>
</dependency>

<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-jdbc</artifactId>
<version>5.2.8.RELEASE</version>
</dependency>

<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-context</artifactId>
<version>5.2.8.RELEASE</version>
</dependency>

<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
<property name="url" value="jdbc:derby:D:\\software\\db-derby-10.14.2.0-bin\\bin\\empdb" />
</bean>
	
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
<property name="dataSource" ref="dataSource" />
</bean>


	@Bean
	public DriverManagerDataSource dataSource() {
		DriverManagerDataSource ds = new DriverManagerDataSource();
		ds.setDriverClassName("org.apache.derby.jdbc.EmbeddedDriver");
		ds.setUrl("jdbc:derby:D:\\software\\db-derby-10.14.2.0-bin\\bin\\empdb;create=true");
			
		return ds;
	}

	@Bean
	public JdbcTemplate jdbcTemplate() {
		return new JdbcTemplate(dataSource());
	}



_______________________________


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

/**
 * Hello world!
 *
 */
public class App {
	public static void main(String[] args) {

		// findById(1);
		// findAll();
		// create("TV Remote", 300);
		// XfindById(1);
		// XfindAll();
		//count();
		NfindById(2);
	}

	private static void create(String name, double price) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		String sql = "insert into product(name,price) values(?,?)";
		Object param[] = { name, price };
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		int n = jt.update(sql, param);
		System.out.println(n + "record(s) inserted...");

	}

	private static void XfindById(int id) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		final String QUERY = "select * from product where id=?";
		Object param[] = { id };

		Product p = jt.queryForObject(QUERY, param, new PRowMapper());
		System.out.println(p.getId() + ":" + p.getName() + ":" + p.getPrice());
	}

	static class PRowMapper implements RowMapper<Product> {
		@Override
		public Product mapRow(ResultSet rs, int rowNum) throws SQLException {
			Product p = new Product();
			p.setId(rs.getInt("id"));
			p.setName(rs.getString("name"));
			p.setPrice(rs.getDouble("price"));
			return p;
		}
	}

	private static void findById(int id) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		final String QUERY = "select * from product where id=?";
		Object param[] = { id };
		Product p = jt.queryForObject(QUERY, param, new BeanPropertyRowMapper<Product>(Product.class));
		System.out.println(p.getId() + ":" + p.getName() + ":" + p.getPrice());
	}

	private static void NfindById(int id) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		final String QUERY = "select * from product where id=:xyz";

		DriverManagerDataSource ds = (DriverManagerDataSource) context.getBean("dataSource");
		NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(ds);
		MapSqlParameterSource param = new MapSqlParameterSource();
		param.addValue("xyz", id);

		Product p = npjt.queryForObject(QUERY, param, new BeanPropertyRowMapper<Product>(Product.class));
		System.out.println(p.getId() + ":" + p.getName() + ":" + p.getPrice());
	}

	private static void XfindAll() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		final String QUERY = "select * from product";
		List<Product> products = jt.query(QUERY, (rs, rowNum) -> {
			Product p = new Product();
			p.setId(rs.getInt("id"));
			p.setName(rs.getString("name"));
			p.setPrice(rs.getDouble("price"));
			return p;
		});

		products.stream().forEach(System.out::println);
	}

	private static void findAll() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		final String QUERY = "select * from product";
		List<Product> products = jt.query(QUERY, new BeanPropertyRowMapper<Product>(Product.class));
		products.stream().forEach(System.out::println);
	}

	public static void count() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		String sql = "select count(*) from product";
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		int n = jt.queryForObject(sql, Integer.class);
		System.out.println(n);
	}

	public void countNamedparam() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
		String sql = "select count(*) from producttable where name= :nm";
		DriverManagerDataSource ds = (DriverManagerDataSource) context.getBean("dataSource");
		NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(ds);
		MapSqlParameterSource param = new MapSqlParameterSource();
		param.addValue("nm", "Pen");
		int n = npjt.queryForObject(sql, param, Integer.class);
		System.out.println(n);
	}

}
